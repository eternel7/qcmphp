Voici des règles de codage qu'il serait bien de suivre. 
Je les vole sur phpBB (le forum) donc c'est en anglais mais tout le monde ici parle la langue de Shakespear non?
Je prendrais le temps d'en faire une traduction au fur et à mesure.


[u][b]Editor Settings[/b][/u]
[b]Tabs vs Spaces:[/b] In order to make this as simple as possible, we will 
be using tabs, not spaces. Feel free to set how many spaces your editor uses 
when it [b]displays[/b] tabs, but make sure that when you [b]save[/b] the file, 
it's saving tabs and not spaces. This way, we can each have the code be 
displayed the way we like it, without breaking the layout of the actual files. 

 
[u][b]Naming Conventions[/b][/u]
We will not be using any form of hungarian notation in our naming 
conventions. Many of us believe that hungarian naming is one of the primary code 
obfuscation techniques currently in use. 

[b]Variable Names:[/b] Variable names should be in all lowercase, with words 
separated by an underscore. 

				Example: [code]vcurrent_user[/code] is right, but 
[code]vcurrentuser[/code] and [code]vcurrentUser[/code] are not. 

Names should be descriptive, 
but concise. We don't want huge sentences as our variable names, but typing an 
extra couple of characters is always better than wondering what exactly a 
certain variable is for. 

[b]Loop Indices:[/b] The [i]only[/i] situation where a one-character variable 
name is allowed is when it's the index for some looping construct. In this case, 
the index of the outer loop should always be vi. If there's a loop inside that 
loop, its index should be vj, followed by vk, and so on. If the loop is being 
indexed by some already-existing variable with a meaningful name, this guideline 
does not apply. 

				Example: [code]
		for (vi = 0; vi < vouter_size; vi++) 
		{
		   for (vj = 0; vj < vinner_size; vj++) 
		   {
		      foo(vi, vj);
		   }
		} [/code]


[b]Function Names:[/b] Functions should also be named descriptively. We're 
not programming in C here, we don't want to write functions called things like 
"stristr()". Again, all lower-case names with words separated by a single 
underscore character. Function names should preferably have a verb in them 
somewhere. Good function names are [code] 
print_login_status()[/code], [code] 
get_user_data()[/code], etc.. 

[b]Function Arguments:[/b] Arguments are subject to the same guidelines as 
variable names. We don't want a bunch of functions like: [code] 
do_stuff(va, vb, vc)[/code]. In most cases, we'd like to be able 
to tell how to use a function by just looking at its declaration. 

[b]Summary:[/b] The basic philosophy here is to not hurt code clarity for the 
sake of laziness. This has to be balanced by a little bit of common sense, 
though; [code]print_login_status_for_a_given_user()[/code] 
goes too far, for example -- that function would be better named [code] 
print_user_login_status()[/code] , or just [code] 
print_login_status()[/code]. 


 
[u][b]Code Layout[/b][/u]
[b]Always include the braces:[/b] This is another case of being too lazy to 
type 2 extra characters causing problems with code clarity. Even if the body of 
some construct is only one line long, do [i]not[/i] drop the braces. Just don't. 


			Examples:[code]
		/* These are all wrong. */
		if (condition)	do_stuff();
		if (condition)
			do_stuff();
		while (condition) 
			do_stuff();
		for (vi = 0; vi < size; vi++)
			do_stuff(vi);
		
		/* These are right. */
		if (condition) 
		{
			do_stuff();
		}
		while (condition) 
		{
			do_stuff();
		}
		for (vi = 0; vi < size; vi++) 
		{
			do_stuff();
		}
	[/code]


[b]Where to put the braces:[/b] This one is a bit of a holy war, but we're 
going to use a style that can be summed up in one sentence: Braces always go on 
their own line. The closing brace should also always be at the same column as 
the corresponding opening brace. 

			Examples:[code]
		if (condition) 
		{
			while (condition2)
			{
				...
			}
		}
		else 
		{
			...
		}

		for (vi = 0; vi < vsize; vi++) 
		{
			...
		}
		
		while (condition) 
		{
			...
		}
		
		function do_stuff() 
		{
			...
		}
	[/code]


[b]Use spaces between tokens:[/b] This is another simple, easy step that 
helps keep code readable without much effort. Whenever you write an assignment, 
expression, etc.. Always leave [i]one[/i] space between the tokens. Basically, 
write code as if it was English. Put spaces between variable names and 
operators. Don't put spaces just after an opening bracket or before a closing 
bracket. Don't put spaces just before a comma or a semicolon. This is best shown 
with a few examples. 

			Examples:[code]
		/* Each pair shows the wrong way followed by the right way. */
		
		vi=0;
		vi = 0;
		
		if(vi<7) ...
		if (vi < 7) ...
		
		if ( (vi < 7)&&(vj > 8) ) ...
		if ((vi < 7) && (vj > 8)) ...
		
		do_stuff( vi, "foo", vb );
		do_stuff(vi, "foo", vb);
		
		for(vi=0; vi<vsize; vi++) ...
		for(vi = 0; vi < vsize; vi++) ... 
	[/code]


[b]Operator precedence:[/b] Do you know the exact precedence of all the 
operators in Opx2script? Neither do I. Don't guess. Always make it obvious by using 
brackets to force the precedence of an equation so you know what it does. 


			Examples:[code]
		/* what's the result? who knows. */
		vbool = (vi < 7 && vj > 8 || vk == 4);
		
		/* now you can be certain what I'm doing here. */
		vbool = ((vi < 7) && ((vj > 8) || (vk == 4)))
		[/code]


[b]Comments:[/b] Each function should be preceded by a comment that tells a 
programmer everything they need to know to use that function. The meaning of 
every parameter, the expected input, and the output are required as a minimal 
comment. The function's behaviour in error conditions (and what those error 
conditions are) should also be present. Nobody should have to look at the actual 
source of a function in order to be able to call it with confidence in their own 
code. 

In addition, commenting any tricky, obscure, or otherwise 
not-immediately-obvious code is clearly something we should be doing. Especially 
important to document are any assumptions your code makes, or preconditions for 
its proper operation. Any one of the developers should be able to look at any 
part of the application and figure out what's going on in a reasonable amount of 
time. 

[b]Shortcut operators:[/b] The only shortcut operators that cause readability 
problems are the shortcut increment (vi++) and decrement (vj--) operators. These 
operators should not be used as part of an expression. They can, however, be 
used on their own line. Using them in expressions is just not worth the 
headaches when debugging. 

			Examples:[code]
		/* wrong */
		varray[++vi] = vj;
		varray[vi++] = vk;
		
		
		/* right */
		vi++;
		varray[vi] = vj;
		
		varray[vi] = vk;
		vi++;
		[/code]

[b]Don't use uninitialized variables.[/b] for Opx2Script R4SP3, PLW intend to use a 
higher level of run-time error reporting. This will mean that the use of an 
uninitialized variable will be reported as an error.